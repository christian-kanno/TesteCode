package DAO;

import util.Conexao;
import nucleoDeInterface.IDAO;
import dominio.EntidadeDominio;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public abstract class AbsJdbcDAO implements IDAO{

    protected Connection connection;
    protected String sTabela;
    protected String sIdTabela;
    protected boolean controlTransaction=true;
	
    public AbsJdbcDAO( Connection connection, String table, String idTable)
    {
        this.sTabela = table;
	this.sIdTabela = idTable;
        this.connection = connection;
    }
	
    protected AbsJdbcDAO(String table, String idTable)
    {
	this.sTabela = table;
	this.sIdTabela = idTable;
    }
	@Override
	public void excluir(EntidadeDominio entidade) {		
		openConnection();
		PreparedStatement pst=null;		
		StringBuilder sb = new StringBuilder();
		sb.append("DELETE FROM ");
		sb.append(sTabela);
		sb.append(" WHERE ");
		sb.append(sIdTabela);
		sb.append("=");
		sb.append("?");	
		try {
			connection.setAutoCommit(false);
			pst = connection.prepareStatement(sb.toString());
			pst.setInt(1, entidade.getId());

			pst.executeUpdate();
			connection.commit();
		} catch (SQLException e) {
			try {
				connection.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			e.printStackTrace();			
		}finally{
			
			try {
				pst.close();
				if(controlTransaction)
					connection.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}		
	}		
	protected void openConnection(){
            try 
            {	
		if(connection == null || connection.isClosed())
                {
                    connection = Conexao.getConnection();
                }
			
            } catch (ClassNotFoundException e) {
		e.printStackTrace();
            } catch (SQLException e) {
		e.printStackTrace();
            }
	}
}
